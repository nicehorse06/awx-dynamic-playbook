# Example of extended common Ansible built-in modules
# As long as the corresponding fields are defined in `item`, the respective module will be executed.

- name: "Command: {{ item.name }}"
  become: yes
  command: "{{ item.command }}"
  when: item.command is defined

- name: "Shell: {{ item.name }}"
  become: yes
  shell: "{{ item.shell }}"
  when: item.shell is defined

- name: "Debug: {{ item.name }}"
  debug:
    msg: "{{ item.debug.msg }}"
  when: item.debug is defined

- name: "File: {{ item.name }}"
  become: yes
  file:
    path: "{{ item.file.path }}"
    state: "{{ item.file.state | default('file') }}"
    mode: "{{ item.file.mode | default('0644') }}"
  when: item.file is defined

- name: "Copy: {{ item.name }}"
  become: yes
  copy:
    src: "{{ item.copy_params.src }}"
    dest: "{{ item.copy_params.dest }}"
    mode: "{{ item.copy_params.mode | default('0644') }}"
  when: item.copy_params is defined


- name: "Template: {{ item.name }}"
  become: yes
  template:
    src: "{{ item.template.src }}"
    dest: "{{ item.template.dest }}"
  when: item.template is defined

- name: "APT: {{ item.name }}"
  become: yes
  apt:
    name: "{{ item.apt.name }}"
    state: "{{ item.apt.state | default('present') }}"
    update_cache: yes
  when: item.apt is defined

- name: "Yum: {{ item.name }}"
  become: yes
  yum:
    name: "{{ item.yum.name }}"
    state: "{{ item.yum.state | default('present') }}"
  when: item.yum is defined

- name: "Service: {{ item.name }}"
  become: yes
  service:
    name: "{{ item.service.name }}"
    state: "{{ item.service.state | default('started') }}"
    enabled: "{{ item.service.enabled | default(true) }}"
  when: item.service is defined

- name: "User: {{ item.name }}"
  become: yes
  user:
    name: "{{ item.user.name }}"
    state: "{{ item.user.state | default('present') }}"
  when: item.user is defined

- name: "Lineinfile: {{ item.name }}"
  become: yes
  lineinfile:
    path: "{{ item.lineinfile.path }}"
    line: "{{ item.lineinfile.line }}"
    state: "{{ item.lineinfile.state | default('present') }}"
  when: item.lineinfile is defined

- name: "Git: {{ item.name }}"
  become: yes
  git:
    repo: "{{ item.git.repo }}"
    dest: "{{ item.git.dest }}"
    version: "{{ item.git.version | default('HEAD') }}"
  when: item.git is defined
